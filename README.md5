### User Authentication with flask login:-
When users log in to the application, their authenticated state has to be recorded in the user session, so that it is remembered as they navigate through different pages.
Flask-Login is a small but extremely useful extension that specializes in managing
this particular aspect of a user authentication system, without being tied to a specific authentication mechanism.
To begin, the extension needs to be installed in the virtual environment:
(venv) $ pip install flask-login
# Preparing the User Model for Logins
  Flask-Login works closely with the application’s own User objects. To be able to work
  with the application’s User model, the Flask-Login extension requires it to implement
  a few common properties and methods.

### Singing usere in:-
The implementation of the login() view function is shown in Example 8-11.
from flask import render_template, redirect, request, url_for, flash
from flask_login import login_user
from . import auth
from ..models import User
from .forms import LoginForm
@auth.route('/login', methods=['GET', 'POST'])
def login():
form = LoginForm()
if form.validate_on_submit():
user = User.query.filter_by(email=form.email.data).first()
if user is not None and user.verify_password(form.password.data):
login_user(user, form.remember_me.data)
next = request.args.get('next')
if next is None or not next.startswith('/'):
next = url_for('main.index')
return redirect(next)
flash('Invalid username or password.')
return render_template('auth/login.html', form=form)
The view function creates a LoginForm object and uses it like the simple form When the request is of type GET, the view function just renders the tem‐
plate, which in turn displays the form. When the form is submitted in a POST request, Flask-WTF’s validate_on_submit() function validates the form variables, and then
attempts to log the user in. To log a user in, the function begins by loading the user from the database using the
email provided with the form. If a user with the given email address exists, then its verify_password() method is called with the password that also came with the form.
If the password is valid, Flask-Login’s login_user() function is invoked to record the user as logged in for the user session. The login_user() function takes the user to
log in and an optional “remember me” Boolean, which was also submitted with the form. A value of False for this argument causes the user session to expire when the
browser window is closed, so the user will have to log in again next time. A value of True causes a long-term cookie to be set in the user’s browser, which Flask-Login uses
to restore the user session. The optional REMEMBER_COOKIE_DURATION configuration option can be used to change the default one-year duration for the remember cookie.

### Singing users out:-
The implementation of the logout route is:-
from flask_login import logout_user, login_required
@auth.route('/logout')

@login_required
def logout():
logout_user()
flash('You have been logged out.')
return redirect(url_for('main.index'))
To log a user out, Flask-Login’s logout_user() function is called to remove and reset
the user session. The logout is completed with a flash message that confirms the
action and a redirect to the home page.

If you have cloned the application’s Git repository on GitHub, you can run git checkout 8c to check out this version of the application. 
This update contains a database migration, so remember to run flask db upgrade after you check out the code. To ensure that
you have all the dependencies installed, also run pip install requirements.txt.

### Account Management:-
Users who have accounts with the application may need to make changes to their accounts from time to time. The following tasks can be added to the authentication
blueprint using the techniques presented in this chapter: Password updates
Security-conscious users may want to change their passwords periodically. This is an easy feature to implement, because as long as the user is logged in, it is safe to
present a form that asks for the old password and a new password to replace it. This feature is implemented as commit 8f in the GitHub repository. As part of
this change, the “Log Out” link in the navigation bar was refactored into a drop‐down that contains the “Change Password” and “Log Out” links.
Password resets
To avoid locking users out of the application when they forget their passwords, a password reset option can be offered. To implement password resets in a secure
way, it is necessary to use tokens similar to those used to confirm accounts. When a user requests a password reset, an email with a reset token is sent to the
registered email address. The user then clicks the link in the email and, after the token is verified, a form is presented where a new password can be entered. This
feature is implemented as commit 8g in the GitHub repository. Email address changes
Users can be given the option to change their registered email address, but before the new address is accepted it must be verified with a confirmation email. To use
this feature, the user enters the new email address in a form. To confirm the email address, a token is emailed to that address. When the server receives the
token back, it can update the user object. While the server waits to receive the token, it can store the new email address in a new database field reserved for
pending email addresses, or it can store the address in the token along with the id. This feature is implemented as commit 8h in the GitHub repository.
In the next chapter, the user subsystem of Flasky will be extended through the use of user roles.
