### Database management with flask:-
# Flask-SQLAlchemy is a Flask extension that simplifies the use of SQLAlchemy inside
# Flask applications. SQLAlchemy is a powerful relational database framework that
# supports several database backends. It offers a high-level ORM and low-level access
# to the database’s native SQL functionality.
# Like most other extensions, Flask-SQLAlchemy is installed with pip:
# (venv) $ pip install flask-sqlalchemy
# In Flask-SQLAlchemy, a database is specified as a URL.

 In most cases db.relationship() can locate the relationship’s foreign key on its own,
 but sometimes it cannot determine what column to use as a foreign key. For example,
 if the User model had two or more columns defined as Role foreign keys, then
 SQLAlchemy would not know which one of the two to use. Whenever the foreign key
 configuration is ambiguous, additional arguments to db.relationship() need to be given.
 
 There are other relationship types besides one-to-many. The one-to-one relationship
 can be expressed the same way as one-to-many, as described earlier, but with the
 uselist option set to False within the db.relationship() definition so that the
 “many” side becomes a “one” side. The many-to-one relationship can also be
 expressed as a one-to-many if the tables are reversed, or it can be expressed with the
 foreign key and the db.relationship() definition both on the “many” side. The
 most complex relationship type, many-to-many, requires an additional table called an
 association or junction table. You will learn about many-to-many relationships
 
 ## Sending Asynchronous Email:-
If you sent a few test emails, you likely noticed that the mail.send() function blocks for a few seconds while the email is sent, making the browser look unresponsive dur‐
ing that time. To avoid unnecessary delays during request handling, the email send function can be moved to a background thread. Example 6-5 shows this change.
hello.py: asynchronous email support from threading import Thread def send_async_email(app, msg): with app.app_context(): mail.send(msg)
def send_email(to, subject, template, **kwargs):
msg = Message(app.config['FLASKY_MAIL_SUBJECT_PREFIX'] + subject,
sender=app.config['FLASKY_MAIL_SENDER'], recipients=[to])
msg.body = render_template(template + '.txt', **kwargs)
msg.html = render_template(template + '.html', **kwargs)
thr = Thread(target=send_async_email, args=[app, msg])
thr.start()
return thr
This implementation highlights an interesting problem. Many Flask extensions operate under the assumption that there are active application and/or request contexts. As
mentioned previously, Flask-Mail’s send() function uses current_app, so it requires the application context to be active. But since contexts are associated with a thread,
when the mail.send() function executes in a different thread it needs the application context to be created artificially using app.app_context(). The app instance is passed
to the thread as an argument so that a context can be created.

## Application Package:-
The application package is where all the application code, templates, and static files live. It is called simply app here, though it can be given an application-specific name if
desired. The templates and static directories are now part of the application package, so they are moved inside app. The database models and the email support functions
are also moved inside this package, each in its own module, as app/models.py and app/email.py.
Using an Application Factory The way the application is created in the single-file version is very convenient, but it
has one big drawback. Because the application is created in the global scope, there is no way to apply configuration changes dynamically: by the time the script is running,
the application instance has already been created, so it is already too late to make configuration changes. This is particularly important for unit tests because sometimes
it is necessary to run the application under different configuration settings for better test coverage.
The solution to this problem is to delay the creation of the application by moving it into a factory function that can be explicitly invoked from the script. This not only
gives the script time to set the configuration, but also the ability to create multiple application instances—another thing that can be very useful during testing. The
application factory functionis defined in the app package constructor.

from flask import Flask, render_template
from flask_bootstrap import Bootstrap
from flask_mail import Mail
from flask_moment import Moment
from flask_sqlalchemy import SQLAlchemy
from config import config
bootstrap = Bootstrap()
mail = Mail()
moment = Moment()
db = SQLAlchemy()
def create_app(config_name):
app = Flask(__name__)
app.config.from_object(config[config_name])
config[config_name].init_app(app)
bootstrap.init_app(app)
mail.init_app(app)
moment.init_app(app)
db.init_app(app)



